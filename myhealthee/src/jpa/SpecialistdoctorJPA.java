package jpa;
// Generated 28-nov-2019 14:02:34 by Hibernate Tools 4.3.5.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Specialistdoctor generated by hbm2java
 */
@Entity
@Table(name = "specialistdoctor", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "doctor_id"))
public class SpecialistdoctorJPA implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private double id;
	private DoctorJPA doctor;
	private MedicalspecialtyJPA medicalspecialty;
	private Set<MedicaltestJPA> medicaltests = new HashSet<MedicaltestJPA>(0);

	public SpecialistdoctorJPA() {
	}

	public SpecialistdoctorJPA(double id, DoctorJPA doctor, MedicalspecialtyJPA medicalspecialty) {
		this.id = id;
		this.doctor = doctor;
		this.medicalspecialty = medicalspecialty;
	}

	public SpecialistdoctorJPA(double id, DoctorJPA doctor, MedicalspecialtyJPA medicalspecialty,
			Set<MedicaltestJPA> medicaltests) {
		this.id = id;
		this.doctor = doctor;
		this.medicalspecialty = medicalspecialty;
		this.medicaltests = medicaltests;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false, precision = 17, scale = 17)
	public double getId() {
		return this.id;
	}

	public void setId(double id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "doctor_id", unique = true, nullable = false)
	public DoctorJPA getDoctor() {
		return this.doctor;
	}

	public void setDoctor(DoctorJPA doctor) {
		this.doctor = doctor;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "medicalspecialty_id", nullable = false)
	public MedicalspecialtyJPA getMedicalspecialty() {
		return this.medicalspecialty;
	}

	public void setMedicalspecialty(MedicalspecialtyJPA medicalspecialty) {
		this.medicalspecialty = medicalspecialty;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "specialistdoctor")
	public Set<MedicaltestJPA> getMedicaltests() {
		return this.medicaltests;
	}

	public void setMedicaltests(Set<MedicaltestJPA> medicaltests) {
		this.medicaltests = medicaltests;
	}

}
